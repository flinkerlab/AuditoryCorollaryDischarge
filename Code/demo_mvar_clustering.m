clc; clear; close all;

% add the path to code and data!
addpath(genpath(pwd));

% set up the subject
root_path = pwd;
Subj = 'NY742';
tasks2consider = 'AudRep';
preprocessing_mode = 'ZScoreTrials';
number_log_dist_bands = 1;
flag_response_lock = true;
flag_clean_trials = true;
selected_elecs = [7,15,23,22,30,38,102,103,111,113,118,120,125,54,45,116,117,44,51,124,128,19,27,28,37,74,95,98,108,109,112,20,29,65,66,70,71,72,75,99,101,110,18,92,67,104];

fprintf('working on tasks:\n');
fprintf([tasks2consider, '\n']);

% load and pre-process the data
EP = EcogPreProcessing(root_path, Subj, tasks2consider,...
                       'epoch_start', -512 - round(9/200*512),...
                       'epoch_end', 512 + round(10/200*512),...
                       'flag_response_lock', flag_response_lock,...
                       'preprocessing_mode', preprocessing_mode,...
                       'number_log_dist_bands', number_log_dist_bands,...
                       'flag_clean_trials', flag_clean_trials,...
                       'reference_mode', 'gdat_CAR',...
                       'Areas2Consider', {}, ...
                       'selected_elecs', selected_elecs,...
                       'flag_resample_data', true,...
                       'resample_srate', 200);

[EP, ecogdata, stamps, coords] = EP.get_ecogdata();

% build and fit the MVAR model
model_order = 4;
window_size = 20;
window_shift = 2;
MVAR = EcogMVAR('window_size', window_size,...
                'window_shift', window_shift,...
                'model_order', model_order,...
                'srate', 200);
[A, Q, time_values, time_start_win] = MVAR.FitMVAR(ecogdata,...
                                                   'time_vector', stamps.time_vector);
% get PDC from the MVAR
[PDC] = MVAR.get_MVAR_PDC(-A, 'mode', 1);

% perform unsupervised clustering with ONMF
ONMF = EcogONMF('num_clusters', 4);
[V, Ulb, U] = ONMF.ONMFCluster(PDC);
ONMF.visual_clustering(V, Ulb, U, coords,...
                       'time_start_window', time_start_win,...
                       'flag_renormalize', true)

% get mean suppression indices
[SI_mean, SI_se] = compute_suppression_index(Subj, selected_elecs);
% plot the relation 
ONMF.visual_clustering_suppression(V,Ulb,U,coords,SI_mean,...
                                   'time_start_window', time_start_win,...
                                   'flag_renormalize', true)
